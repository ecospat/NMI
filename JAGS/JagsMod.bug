model{
  
    ### Likelihood 	
	for(i in 1:Nobs){
		Y[i] ~ dbern(psi[i])
		logit(psi[i]) <- mean.alpha + mean.beta*focus.var[i] + # main effects (intercept and slope)
						 alpha1[id1[i]] + # species-wise effect (intercept)
						 alpha2[id2[i]] + # realm-wise effect (intercept)
						 alpha3[id3[i]] + # family-wise effect (intercept)
						 beta.island*Island[i] +
						 inprod(Xtrait[i,], beta.trait[]) # trait effects
	}
	
	### Priors for main effects
	mean.alpha ~ dnorm(0,0.1) # main intercept
	mean.beta ~ dnorm(0,0.1) # main slope
	beta.island ~ dnorm(0,0.1) # Island effect
	
	### Prior for species-wise effects	
	for(i in 1:Nsp){ 
		alpha1[i] ~ dnorm(alpha3[id4[i]],tau.sp) # species-wise intercepts nested within families		
	}
	tau.sp <- pow(sd.sp,-2)
	sd.sp ~ dt(0,1,1)T(0,) # standard-dev for species-wise intercepts
	
	### Priors for realm-wise effects
	for(i in 1:Nrealm){
		alpha2[i] ~ dnorm(0,tau.realm) # realm-wise intercepts
	}
	tau.realm <- pow(sd.realm,-2)
	sd.realm ~ dt(0,1,1)T(0,) # standard-dev for realm-wise intercepts
	
	### Priors for family-wise effects
	for(i in 1:Nfam){ 
		alpha3[i] ~ dnorm(0,tau.fam) # species-wise intercepts nested within family effect		
	}
	tau.fam <- pow(sd.fam,-2)
	sd.fam ~ dt(0,1,1)T(0,) # standard-dev for species-wise intercepts		

	### Priors for trait effects
	for(i in 1:Nobs){ 
		for(j in 1:Ntrait){
			Xtrait[i,j] ~ dnorm(nu[j],tau.trait[j]) # generate data for missing values
		}
	}	
	for(i in 1:Ntrait){
		beta.trait[i] ~ dnorm(0,0.1)  # prior for slope coefficients related to trait
		nu[i] ~ dnorm(0,0.1) # mean of the distribution for trait i (centered on zero because the variables were scaled)
		tau.trait[i] <- pow(sd.trait[i],-2)
		sd.trait[i] ~ dt(0,1,1)T(0,) # std-dev of the distribution for trait i
	}
	
	### Posterior predictive checks
	for(i in 1:Nobs){ 		
		pred[i] <- psi[i]
		res1[i] <- pow(Y[i]-pred[i],2)/(pred[i]*(1-pred[i])+0.01)
    
		Y.new[i] ~ dbern(psi[i])
		res2[i] <- pow(Y.new[i]-pred[i],2)/(pred[i]*(1-pred[i])+0.01)
    }
    
    # sum of squared standardized residuals
    fit <- sum(res1[])
    fit.new <- sum(res2[])
    
    # Bayesian P-value
    test <- step(fit.new-fit)
    bpvalue <- mean(test)	
}